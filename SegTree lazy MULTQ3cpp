#include <bits/stdc++.h>
using namespace std ;
#define N 100005
struct node
{
    int r[3] ;
} st[4*N] ;

int n,m,lazy[4*N],temp ,qs,qe,us,ue ;


void bst(int i,int s,int e)
{
    if( s == e )
    {
        st[i].r[0] = 1 ;
        return ;
    }
    int m = (s+e)/2 ;
    bst(2*i+1,s,m) ;
    bst(2*i+2,m+1,e) ;
    st[i].r[0] = st[2*i+1].r[0] + st[2*i+2].r[0] ;
}

int qry( int i,int s,int e )
{
    if( lazy[i] != 0 )
    {
        if( lazy[i]%3 == 1 )
        {
            temp = st[i].r[1] ;
            st[i].r[1] = st[i].r[0] ;
            st[i].r[0] = st[i].r[2] ;
            st[i].r[2] = temp ;
        }
        else if( lazy[i]%3 == 2 )
        {
            temp = st[i].r[1] ;
            st[i].r[1] = st[i].r[0] ;
            st[i].r[0] = st[i].r[2] ;
            st[i].r[2] = temp ;

            temp = st[i].r[1] ;
            st[i].r[1] = st[i].r[0] ;
            st[i].r[0] = st[i].r[2] ;
            st[i].r[2] = temp ;
        }
        if( s != e )
        {
            lazy[2*i+1] += lazy[i] ;
            lazy[2*i+2] += lazy[i] ;
        }
        lazy[i] = 0 ;
    }

    if( e < qs or qe < s ) return 0 ;
    if( qs <= s and e <= qe ) return st[i].r[0] ;
    int m = (s+e)/2 ;
    return qry(2*i+1,s,m) + qry(2*i+2,m+1,e) ;
}

void updt(int i,int s,int e)
{
    if( lazy[i] != 0 )
    {
        if( lazy[i]%3 == 1 )
        {
            temp = st[i].r[1] ;
            st[i].r[1] = st[i].r[0] ;
            st[i].r[0] = st[i].r[2] ;
            st[i].r[2] = temp ;
        }
        else if( lazy[i]%3 == 2 )
        {
            temp = st[i].r[1] ;
            st[i].r[1] = st[i].r[0] ;
            st[i].r[0] = st[i].r[2] ;
            st[i].r[2] = temp ;

            temp = st[i].r[1] ;
            st[i].r[1] = st[i].r[0] ;
            st[i].r[0] = st[i].r[2] ;
            st[i].r[2] = temp ;
        }
        if( s != e )
        {
            lazy[2*i+1] += lazy[i] ;
            lazy[2*i+2] += lazy[i] ;
        }
        lazy[i] = 0 ;
    }

    if(  e < us or ue < s ) return ;
    if(  us <= s and e <= ue )
    {
            temp = st[i].r[1] ;
            st[i].r[1] = st[i].r[0] ;
            st[i].r[0] = st[i].r[2] ;
            st[i].r[2] = temp ;
            if( s != e )
            {
                lazy[2*i+1]++ ;
                lazy[2*i+2]++ ;
            }
            return ;
    }

    int m = (s+e)/2 ;
    updt( 2*i+1 , s , m ) ;
    updt( 2*i+2 , m+1 ,e ) ;
    st[i].r[0] = st[2*i+1].r[0] + st[2*i+2].r[0] ;
    st[i].r[1] = st[2*i+1].r[1] + st[2*i+2].r[1] ;
    st[i].r[2] = st[2*i+1].r[2] + st[2*i+2].r[2] ;
}

int main()
{
    cin >> n >> m ;
    for( int i=0 ; i <= 4*n ; i++ )
    {
        st[i].r[0] =  st[i].r[1] = st[i].r[2] = 0;
        lazy[i] = 0 ;
       // st[i].r[0] = 1 ;
    }
    bst(0,0,n-1) ;
    while( m-- )
    {
        int c ;
        cin >> c ;
        if( c == 0 )
        {
            cin >> us >> ue ;
            updt(0,0,n-1) ;
        }
        else
        {
            cin >> qs >> qe ;
            cout << qry(0,0,n-1) << endl ;
        }
    }

    return 0 ;
}

// https://www.spoj.com/problems/MULTQ3/
